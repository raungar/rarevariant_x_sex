import os, sys, glob, re

print(sys.version)
configfile: "/oak/stanford/groups/smontgom/raungar/Sex/Scripts/environment_paths.yaml"

VARTYPES=["SNPs","indels","SV"]
with open(config["RAREDIR"]+"/preprocessing_v8/gtex_2017-06-05_v8_euro_VCFids.txt") as f:
	SAMPLES=f.readlines()
	SAMPLES=[this_sample.strip() for this_sample in SAMPLES]

#FILES=os.listdir("Output/features_v8/bySiteAnnoAut/*ZZ*SNP*")
FILES=glob.glob("Output/features_v8/bySiteAut/*SNP*")
###FILES=glob.glob("Output/features_v8/bySite/*SNP*")
split_files=[re.split("_|/",f) for f in FILES]
print(split_files)
IDS_VARTYPES=[]
for splitf in split_files:
	print(splitf)
	if len(splitf) == 1:
		continue
	#make sure european, if not skip
	#if splitf[2] in SAMPLES:
	if splitf[4] in SAMPLES:
		id_and_vartype=splitf[4]+"_"+splitf[5] #subtract 1 for aut <- this is aut
		#id_and_vartype=splitf[5]+"_"+splitf[6] #subtract 1 for aut <-this isx
		#id_and_vartype=splitf[2]+"_"+splitf[3] #subtract 1 for aut
		IDS_VARTYPES.append(id_and_vartype)
	#break
#CHRNUM="X"
#IDS_VARTYPES="GTEX-111CU_SNPs"
print(IDS_VARTYPES)
CHRNUM=range(1,23)
CHROMOSOMES=range(1,23)
#CHRNUM="X"
#CHROMOSOMES="X"

rule all:
	input:
		#expand(config["RAREDIR"]+"/features_v8/bySiteXFIX/x_{sample_vartype}_chr{chrN}_anno.bed.gz",
		#	chrN=CHRNUM,sample_vartype=IDS_VARTYPES)
		expand(config["RAREDIR"]+"/features_v8/bySiteAutFIX/{sample_vartype}_chr{chrN}_anno.bed.gz",
			chrN=CHRNUM,sample_vartype=IDS_VARTYPES)
		#expand(config["RAREDIR"]+"/features_v8/maf_diff_aut_chr{chrN}.tsv.gz",chrN=CHRNUM),
		#expand(config["RAREDIR"]+"/features_v8/collapsed_maf_both_aut_chr{chrN}.tsv.gz",chrN=CHRNUM),
		#expand(config["RAREDIR"]+"/features_v8/collapsed_maf_m_aut_chr{chrN}.tsv.gz",chrN=CHRNUM),
		#expand(config["RAREDIR"]+"/features_v8/collapsed_maf_f_aut_chr{chrN}.tsv.gz",chrN=CHRNUM),
		#expand(config["RAREDIR"]+"/features_v8/GTF_lnc_protcod_only/chr{chrN}.gtf",chrN=CHRNUM)
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoX/GeneAnnoProtCodLinc/x_{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GeneAnnoProtCodLinc/{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		#expand(config["RAREDIR"]+"/features_v8/collapsed_maf_both_aut_chr{chrN}.tsv.gz",
		#expand(config["RAREDIR"]+"/enrichments_v8/{chrN}_all_rvs_inds_types_linc_prot.txt.gz",
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM),
		#config["RAREDIR"]+"/enrichments_v8/x_all_rvs_inds_types_linc_prot.txt.gz"
		#config["RAREDIR"]+"/features_v8/collapsed_maf_both_linc_prot_aut.tsv.gz"
		#config["RAREDIR"]+"/features_v8/collapsed_maf_both_all.tsv.gz"
		#config["RAREDIR"]+"/features_v8/collapsed_maf_both_linc_prot_x.tsv.gz"
		#########expand(config["RAREDIR"]+"/enrichments_v8/{chrN}_all_rvs_inds_types.txt.gz",chrN=CHRNUM)
		##config["RAREDIR"]+"/enrichments_v8/x_all_rvs_inds_types.txt.gz",
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoX/GenesAnno/x_{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM)	
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GenesAnno/{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM)
		#config["RAREDIR"]+"/features_v8/GTF/combine_genes.log"
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoX/GenesAnno/x_{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM)
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoX/x_{sample_vartype}_chr{chrN}_anno.bed.gz", 
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM)
		#expand(config["RAREDIR"]+"/features_v8/bySiteAnnoX/x_{sample_vartype}_chr{chrN}_anno.bed.gz",
		#sample_vartype=IDS_VARTYPES,chrN=CHRNUM)
		###expand(config["RAREDIR"]+"/features_v8/ConfFiles/conf_chr{chrN}.toml",
		###chrN=CHRNUM)
		#expand(config["RAREDIR"]+"/features_v8/bySiteHeaders/x_{sample}_{vartype}_features_wheader.bed.gz",
		#sample=SAMPLES,vartype=VARTYPES)
		#expand(config["RAREDIR"]+"/features_v8/bySiteHeaders/x_{sample_vartype}_features_wheader.bed.gz",
		#		sample_vartype=IDS_VARTYPES)

		#expand(config["RAREDIR"]+"/features_v8/bySiteHeaders/x_{sample_vartype}_features_wheader.bed.gz",
		#sample_vartype=IDS_VARTYPES)
		#config["RAREDIR"]+"/features_v8/run_vcf2bed.log"

#first run to prepare files
rule vcf2bed:
	input:
		GTEX_WGSv8=config["GTEX_WGSv8"],
		euro_ids=config["RAREDIR"]+"/preprocessing_v8/gtex_2017-06-05_v8_euro_VCFids.txt"
	params:
		scriptdir="/oak/stanford/groups/smontgom/raungar/Sex/Scripts",
		outdir=config["RAREDIR"]+"/features_v8/BED"
	output:
		log=config["RAREDIR"]+"/features_v8/run_vcf2bed.log"
	shell:
		"""
		echo "rule vcf2bed"
		mkdir -p {params.outdir}
		sh {params.scriptdir}/Features/vcf2bedfiles_gnomad.sh \
		{input.GTEX_WGSv8} {input.euro_ids} {params.outdir} > {output.log}
		"""

rule vcf_anno_run_chrX:
	input:
		gnomad=config["GNOMAD"]+"/gnomad.genomes.r3.0.sites.chr{chrN}.vcf.bgz",
		#gnomad="/oak/stanford/groups/smontgom/raungar/Sex/GTEX-R53T_SNPs.tmp.gz",
              	#gnomad=config["GNOMAD"]+"/gnomad.genomes.r3.0.sites.chr{chrN}.vcf.bgz",
		#sample_w_headers=config["RAREDIR"]+"/features_v8/bySiteHeaders/x_{sample_vartype}_features_wheader.bed.gz"
		sample=config["RAREDIR"]+"/features_v8/bySite/x_{sample_vartype}_features.bed.gz"
	output:
		sample_anno=config["RAREDIR"]+"/features_v8/bySiteXFIX/x_{sample_vartype}_chr{chrN}_anno.bed.gz"
	shell:
		"""
		date
		echo "rule vcf_anno_run_chrX"
		set +o pipefail;
		module load bedtools
		##get matches
		zcat {input.sample} | awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}' | bedtools intersect -a stdin -b {input.gnomad} -wa -wb | awk -F"\t|;" '{{if($6 == $32  || $7==$32){{print $0}}}}' > {output.sample_anno}.match
		#adjust so same length as the matched file, unmatched column is "NO_MATCH"
		zcat {input.sample} |  awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}'  | bedtools intersect -a stdin  -b {output.sample_anno}.match -v | awk -F "\t" '{{print $0"\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNO_MATCH"}}' > {output.sample_anno}.nomatch
		echo "sorting and combining"
		cat {output.sample_anno}.match {output.sample_anno}.nomatch | sort -k1,1 -k2,2n | gzip -c > {output.sample_anno}
		echo "DONE"
		rm {output.sample_anno}.match ; rm {output.sample_anno}.nomatch ;
		echo "temporary files {output.sample_anno}.match and {output.sample_anno}.nomatch removed"
		date
		"""

rule vcf_anno_run_aut:
	input:
		gnomad=config["GNOMAD"]+"/gnomad.genomes.r3.0.sites.chr{chrN}.vcf.bgz",
		sample=config["RAREDIR"]+"/features_v8/bySiteAut/{sample_vartype}_features.bed.gz"
	params:
		chr="chr{chrN}"
	output:
		sample_anno=config["RAREDIR"]+"/features_v8/bySiteAutFIX/{sample_vartype}_chr{chrN}_anno.bed.gz"
	shell:
		"""
		echo "rule vcf_anno_run_aut"
		module load bedtools
		echo "intersect... "`date`
		zcat {input.sample} | grep {params.chr} | awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}' | bedtools intersect -a stdin -b {input.gnomad} -wa -wb | awk -F"\t|;" '{{if($6 == $40 || $7==$40){{print $0}}}}' > {output.sample_anno}.match
		echo "matched. getting no match: "`date`
		zcat {input.sample} | grep {params.chr} | awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}' | bedtools intersect -a stdin  -b {output.sample_anno}.match -v | awk -F "\t" '{{print $0"\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNO_MATCH"}}' > {output.sample_anno}.nomatch
		
		#adjust so same length as the matched file, unmatched column is "NO_MATCH"
		#less {input.sample} | grep {params.chr} |  awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}'  | bedtools intersect -a stdin  -b {output.sample_anno}.match -v | awk -F "\t" '{{print $0"\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNO_MATCH"}}' > {output.sample_anno}.nomatch
		echo "sorting and combining: `date`"
		cat {output.sample_anno}.match {output.sample_anno}.nomatch | sort -k1,1 -k2,2n | gzip -c > {output.sample_anno}
		echo "DONE: `date`"
		rm {output.sample_anno}.match ; rm {output.sample_anno}.nomatch ; #{output.sample_anno}.tmpin
		echo "temporary files {output.sample_anno}.match and {output.sample_anno}.nomatch removed: `date`"
		date


		echo "temporary files {output.sample_anno}.match and {output.sample_anno}.nomatch removed"
		echo "DONE aut"
		"""

rule gtf_split_by_gene:
	input:
		genes=config["GTEX_GENES"]
	params:
		prefix=config["RAREDIR"]+"/features_v8/GTF"
	output:
		gtf_split_log=config["RAREDIR"]+"/features_v8/GTF/combine_genes.log"
	shell:
		"""
		echo " Scripts/Features/gtf_by_chr.sh [genes] [outfile prefixes]" > {output.gtf_split_log}
		Scripts/Features/gtf_by_chr.sh {input.genes} {params.prefix} > {output.gtf_split_log}
		"""

rule gtf_split_by_gene_lincRNA_protcod_only:
	input:
		gtf=config["RAREDIR"]+"/features_v8/GTF/chr{chrN}.gtf",
		gtf_split_log=config["RAREDIR"]+"/features_v8/GTF/combine_genes.log"
	output:
		config["RAREDIR"]+"/features_v8/GTF_lnc_protcod_only/chr{chrN}.gtf"
	shell:
		"""
		less -S {input.gtf} | sed 's/\"//g' | sed 's/;//g'  | awk -F"\t" '{{if ($12=="protein_coding" || $12=="lincRNA"){{print $0}}}}' > {output}
		"""


##adds vtf and combines A\tG to AG
rule vcf_add_genes_x:
	input:
		sample_anno=config["RAREDIR"]+"/features_v8/bySiteAnnoX/x_{sample_vartype}_chr{chrN}_anno.bed.gz",
		genes=config["RAREDIR"]+"/features_v8/GTF_lnc_protcod_only/chrX.gtf"
	output:
		sample_anno_genes=config["RAREDIR"]+"/features_v8/bySiteXFIX/GeneAnnoProtCodLinc/x_{sample_vartype}_chr{chrN}_anno_genes.bed.gz"
		
	shell:
		"""
		echo "rule vcf_add_genes_x"
		module load bedtools
		bedtools window -a {input.sample_anno} -b {input.genes} -w 10000 | awk -F"\t" '{{print $0"\t"$6$7}}'  > {output.sample_anno_genes}
		bedtools window -a {input.sample_anno} -b {input.genes} -w 10000 -v  | awk -F"\t" '{{printf $0"\t"; for (i=1;i<19; i++){{printf "\tNA"}}; print ""}}'>> {output.sample_anno_genes}

		"""

rule vcf_add_genes_aut:
	input:
		sample_anno=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/{sample_vartype}_chr{chrN}_anno.bed.gz",
		genes=config["RAREDIR"]+"/features_v8/GTF_lnc_protcod_only/chr{chrN}.gtf"
	output:
		sample_anno_genes=config["RAREDIR"]+"/features_v8/bySiteAutFix/GeneAnnoProtCodLinc/{sample_vartype}_chr{chrN}_anno_genes.bed.gz"
		
	shell:
		"""
		echo "rule vcf_add_genes_aut"
		module load bedtools
		#bedtools window -a {input.sample_anno} -b {input.genes} -w 10000 | awk -F"\t" '{{print $0"\t"$6$7}}'  > {output.sample_anno_genes}
		bedtools window -a {input.sample_anno} -b {input.genes} -w 10000  > {output.sample_anno_genes}
		bedtools window -a {input.sample_anno} -b {input.genes} -w 10000 -v  | awk -F"\t" '{{printf $0"\t"; for (i=1;i<18; i++){{printf "\tNA"}}; print ""}}'>> {output.sample_anno_genes}

		"""

rule collapse_vars_to_genes_x:
	input:
		#sample_anno_genes=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GenesAnno/{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		dir_read=config["RAREDIR"]+"/features_v8/bySiteAnnoX/GeneAnnoProtCodLinc",
		sex_file=config["GTEX_SUBJECTSv8"],
		myscript=config["SCRIPTSDIR"]+"/Features/collapse_variants_genes.py"
	params:
		min_maf=0.01,
		cutoff_mafdiff=0.1
	output:
		out_mafdiff=config["RAREDIR"]+"/features_v8/maf_diff_linc_prot_x.tsv.gz",
		out_maf_both=config["RAREDIR"]+"/features_v8/collapsed_maf_both_linc_prot_x.tsv.gz",
		out_maf_m=config["RAREDIR"]+"/features_v8/collapsed_maf_m_linc_prot_x.tsv.gz",
		out_maf_f=config["RAREDIR"]+"/features_v8/collapsed_maf_f_linc_prot_x.tsv.gz"
	shell:
		"""
		module load python3
		echo "running: collapse_vars_to_genes_x"
		python {input.myscript} --dir_read {input.dir_read} --sex_file {input.sex_file} \
			--maf_filter {params.min_maf} --cutoff_mafdiff {params.cutoff_mafdiff} \
			--out_mafdiff {output.out_mafdiff} --out_b {output.out_maf_both} \
			--out_m {output.out_maf_m} --out_f {output.out_maf_f}
		echo "completed: collapse_vars_to_genes_x"
		"""

rule collapse_vars_to_genes_aut:
	input:
		#sample_anno_genes=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GenesAnno/{sample_vartype}_chr{chrN}_anno_genes.bed.gz",
		dir_read=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GeneAnnoProtCodLinc",
		sex_file=config["GTEX_SUBJECTSv8"],
		myscript=config["SCRIPTSDIR"]+"/Features/collapse_variants_genes_aut.py"
	params:
		min_maf=0.01,
		cutoff_mafdiff=0.1,
		chr="chr{chrN}_"
	output:
		out_mafdiff=config["RAREDIR"]+"/features_v8/maf_diff_aut_chr{chrN}_linc_prot.tsv.gz",
		out_maf_both=config["RAREDIR"]+"/features_v8/collapsed_maf_both_aut_chr{chrN}_linc_prot.tsv.gz",
		out_maf_m=config["RAREDIR"]+"/features_v8/collapsed_maf_m_aut_chr{chrN}_linc_prot.tsv.gz",
		out_maf_f=config["RAREDIR"]+"/features_v8/collapsed_maf_f_aut_chr{chrN}_linc_prot.tsv.gz"
	shell:
		"""
		module load python3
		echo "running: collapse_vars_to_genes_x"
		python {input.myscript} --dir_read {input.dir_read} --sex_file {input.sex_file} \
			--maf_filter {params.min_maf} --cutoff_mafdiff {params.cutoff_mafdiff} \
			--out_mafdiff {output.out_mafdiff} --out_b {output.out_maf_both} \
			--out_m {output.out_maf_m} --out_f {output.out_maf_f} --chr {params.chr}
		echo "completed: collapse_vars_to_genes_x"
		"""

rule combine_aut_collapse_vars_to_genes:
	input:
		aut=expand(config["RAREDIR"]+"/features_v8/collapsed_maf_both_aut_chr{chrom}_linc_prot.tsv.gz",chrom=CHROMOSOMES),
	output:
		config["RAREDIR"]+"/features_v8/collapsed_maf_both_linc_prot_aut.tsv.gz"
	shell:
		"""
		zcat {input.aut} | gzip > {output}

		"""
rule combine_all_collapse_vars_to_genes:
	input:
		aut=expand(config["RAREDIR"]+"/features_v8/collapsed_maf_both_aut_chr{chrom}_linc_prot.tsv.gz",chrom=CHROMOSOMES),
		x=config["RAREDIR"]+"/features_v8/collapsed_maf_both_linc_prot_x.tsv.gz"
	output:
		config["RAREDIR"]+"/features_v8/collapsed_maf_both_all_linc_prot.tsv.gz"
	shell:
		"""
		zcat {input.aut} {input.x} | gzip > {output}

		"""
		
	
rule combine_rvs_inds_x:
	input:
		file_dir=config["RAREDIR"]+"/features_v8/bySiteAnnoX/GeneAnnoProtCodLinc"
	params:
		pregz=config["RAREDIR"]+"/enrichments_v8/x_all_rvs_inds_types_linc_prot.txt",
		pattern="x*SNP*gz"
	output:
		gz=config["RAREDIR"]+"/enrichments_v8/x_all_rvs_inds_types_linc_prot.txt.gz"
	shell:
		"""
		#chrX	247403	247403	2.33349e-02	GTEX-111CU	SNPs	ENSG00000228572.7	unprocessed_pseudogene
		#header ^^^ (Ex line above)
		echo -e chr\tstart\tend\tmaf\tsample\tvartype\tensg\tgenetype	> {params.pregz}

		#only keep valuable information (see header above), just awking for manipulation
		for f in {input.file_dir}/{params.pattern}
		do
			echo $f
			gtex_id=`echo $f | awk -F"/" '{{print $NF}}' | grep -o -P 'GTEX.{{0,6}}'`
			var_type=`echo $f | awk -F"/" '{{print $NF}}' | egrep -o '_indels|_SNPs|_SV' | cut -c2-`
			echo $gtex_id","$var_type
			less $f | \
				awk -F"\t" -v gtex_id=$gtex_id -v var_type=$var_type '{{print $1"\t"$2"\t"$3"\t"$4"\t"gtex_id"\t"var_type"\t"$35"\t"$43"\t"$47"\t"$54}}' | \
				awk -F"AF_nfe=" '{{print $2"\t"$0}}' | awk -F";" '{{print $1"\t"$0}}' | \
				awk -F"\t" 'BEGIN{{OFS="\t"}}{{print $6,$7,$8,$1,$10,$11,$3,$4}}' | sed 's/\"//g' | sed 's/;//g' \
			 >> {params.pregz}
		done

		gzip {params.pregz}
		"""
rule combine_rvs_inds_aut:
	input:
		file_dir=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/GeneAnnoProtCodLinc"
	params:
		pregz=config["RAREDIR"]+"/enrichments_v8/{chrN}_all_rvs_inds_types_linc_prot.txt",
		pattern="*SNP*{chrN}*gz"
	output:
		gz=config["RAREDIR"]+"/enrichments_v8/{chrN}_all_rvs_inds_types_linc_prot.txt.gz"
	shell:
		"""
		#chrX	247403	247403	2.33349e-02	GTEX-111CU	SNPs	ENSG00000228572.7	unprocessed_pseudogene
		#this is also just field manipulation to get to this condesnsed line above, where maf is gnomad maf
		echo -e chr\tstart\tend\tmaf\tsample\tvartype\tensg\tgenetype	> {params.pregz}

		#only keep valuable information (see header above), just awking for manipulation
		for f in {input.file_dir}/{params.pattern}
		do
			echo $f
			gtex_id=`echo $f | awk -F"/" '{{print $NF}}' | grep -o -P 'GTEX.{{0,6}}'`
			var_type=`echo $f | awk -F"/" '{{print $NF}}' | egrep -o '_indels|_SNPs|_SV' | cut -c2-`
			echo $gtex_id","$var_type
			less $f | \
				awk -F"\t" -v gtex_id=$gtex_id -v var_type=$var_type '{{print $1"\t"$2"\t"$3"\t"$4"\t"gtex_id"\t"var_type"\t"$35"\t"$43"\t"$51"\t"$59}}' | \
				awk -F"AF_nfe=" '{{print $2"\t"$0}}' | awk -F";" '{{print $1"\t"$0}}' | \
				awk -F"\t" 'BEGIN{{OFS="\t"}}{{if($9=="NO_MATCH")print $2,$3,$4,0,$6,$7,$20,$21; else print $5,$6,$7,$1,$9,$10,$3,$4}}' | sed 's/\"//g' | sed 's/;//g' \
			 >> {params.pregz}
		done

		gzip {params.pregz}
		"""
		#awk -F"\t" '{{print $35}}' | awk -F"AF_nfe=" '{{print $2}}' | awk -F";" '{{print $1}}'

		
#rule combine_rvs_inds_aut:
#	input:
#		file_dir=config["RAREDIR"]+"/features_v8/bySiteAut",
#		sv_file=config["RAREDIR"]+"/features_v8/all_rare_variants_noWindow_HallLabSV_hg38_corrected.bed"
#	params:
#		pregz=config["RAREDIR"]+"/enrichments_v8/aut_all_rvs_inds_types.txt",
#		pattern="GTEX*gz"
#	output:
#		gz=config["RAREDIR"]+"/enrichments_v8/aut_all_rvs_inds_types.txt.gz"
#	shell:
#		"""
#		echo -e chr\tstart\tend\tmaf\tsample\tvartype	> {params.pregz}
#
#		for f in {input.file_dir}/{params.pattern}
#		do
#			echo $f
#			gtex_id=`echo $f | awk -F"/" '{{print $NF}}' | grep -o -P 'GTEX.{{0,6}}'`
#			var_type=`echo $f | awk -F"/" '{{print $NF}}' | egrep -o '_indels|_SNPs|_SV' | cut -c2-`
#			echo $gtex_id","$var_type
#			zcat $f | awk -F"\t" -v gtex_id=$gtex_id -v var_type=$var_type '{{print $1"\t"$2"\t"$3"\t"$4"\t"gtex_id"\t"var_type}}' \
#			 >> {params.pregz}
#		done
#		
#		less -S {input.sv_file} | awk -F"\t" '{{print $1"\t"$2"\t"$3"\t"$5"\t"$4"\tSV"}}' >> {params.pregz}
#
#		gzip {params.pregz}
#		"""


#rule combine_vcf_zscore_x:
#	input:
#		this_script=config["scripts_dir"]+"/Features/combine_bed_zscore.py",
#		zscore_file_both=
#		zscore_file_sex=
#	params:
#		ind="{sample_vartype}",
#		sex=""
#	output:
#		outfile_both=config["RAREDIR"]+"/features_v8/vcf
#		outfile_sex=
#	shell:
#		"""
#		module load python
#		python {input.this_script} --bed_file {input.bed_file} \
#		--zscore_file_both \
#		--zscore_file_sex \
#		--outfile_both \
#		--outfile_sex \
#		--ind {params.ind} \
#		--sex {params.sex}
#
#		"""	
	
#		zcat {input.sample} | head; echo "what on earth";
#		echo ".......?????????????"
#		 #awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}' | head;
#		# | bedtools intersect -a stdin -b {input.gnomad} -wa -wb #\
#		#| awk -F"\t|;" '{{if($6 == $31  && $7==$32){{print $0}}}}' > {output.sample_anno}.match
#		echo "Get singletons"
#		echo "HELLLO"
#		#adjust so same length as the matched file, unmatched column is "NO_MATCH"
#		less {input.sample} |  awk -F"\t" 'BEGIN {{OFS="\t"}} {{$3=$3-1; print $0}}'  | bedtools intersect -a stdin  -b {output.sample_anno}.match -v | awk -F "\t" '{{print $0"\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNO_MATCH"}}' > {output.sample_anno}.nomatch
#		echo "sorting and combining"
#		cat {output.sample_anno}.match {output.sample_anno}.nomatch | sort -k1,1 -k2,2n | gzip -c > {output.sample_anno}
#		echo "DONE"
#		rm {output.sample_anno}.match ; rm {output.sample_anno}.nomatch ;
#		echo "temporary files {output.sample_anno}.match and {output.sample_anno}.nomatch removed"
#		"""
#vcfanno -p 2 {input.conf} {input.sample_w_headers} | bgzip -c > {output.sample}

#rule vcf_anno_run_chrs:#
#	input:
#		conf=config["RAREDIR"]+"/features_v8/ConfFiles/conf_chr{chrN}.toml",
#		sample_w_headers=config["RAREDIR"]+"/features_v8/bySiteAutHeaders/{sample_vartype}_features_wheader.bed.gz"
#	output:
#		sample=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/aut_{sample_vartype}_chr{chrN}_anno.bed.gz"
#	shell:
#		"""
#		vcfanno -p 2 {input.conf} {input.bed} | bgzip -c > {output.sample}
#		"""
	
#rule vcf_anno_concat_aut:
#	input:
#		expand(config["RAREDIR"]+"/features_v8/bySiteAnnoAut/aut_{sample}_chr{this_chrN}_anno.bed.gz",this_chrnum=CHRNUMS)
#	params:
#		myls=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/aut_{sample}_chr*_anno.bed.gz"
#	output:
#		all_chrs=config["RAREDIR"]+"/features_v8/bySiteAnnoAut/aut_{sample}_anno.bed.gz
#		list=temp(config["RAREDIR"]+"/features_v8/{sample}_list.txt")
#	shell:
#		"""
#		for f in `ls {params.myls}`
#		do
#			zcat $f >>
#		done
#	
#		"""
#rule vcf_anno_make_conf_chrX:
#	input:
#		gnomad=config["GNOMAD"]+"/gnomad.genomes.r3.0.sites.chr{chrN}.vcf.bgz"
#	params:
#		field1="INFO",
#		field1_name="INFO_Combined"
#	output:
#		conf=config["RAREDIR"]+"/features_v8/ConfFiles/conf_chr{chrN}.toml"
#	shell:
#		"""
#		echo '[[annotation]]' > {output.conf}
#		echo 'file="{input.gnomad}"' >>	{output.conf}
#		echo 'fields = ["{params.field1}"]' >>  {output.conf}
#		echo 'names=["{params.field1_name}"]' >>  {output.conf}
#		echo 'ops=["self"]' >> {output.conf}
#		"""
#rule add_headers_chrX:
#	input:
#		sample=config["RAREDIR"]+"/features_v8/bySite/x_{sample_vartype}_features.bed.gz" #,
#		#conf=config["RAREDIR"]+"/features_v8/ConfFiles/conf_chr{chrN}.toml"
#	params:
#		ncol_bed=27
#	output:
#		sample_w_headers=config["RAREDIR"]+"/features_v8/bySiteHeaders/x_{sample_vartype}_features_wheader.bed.gz"
#	shell:
#		"""
#		echo -en "chrom\tchromStart\tchromEnd" > {output.sample_w_headers}
#		#other_headers_num=$(({params.ncol_bed}+3))
#		#for header_num in  `seq 4 $other_headers_num`
#		for header_num in  `seq 4 {params.ncol_bed}`
#		do
#			echo -en "\theader$header_num" >> {output.sample_w_headers}
#		done
#		echo "" >> {output.sample_w_headers}
#		zcat {input.sample} >> {output.sample_w_headers}
#		"""


#r#ule add_headers_aut:
#	input:
#		sample=config["RAREDIR"]+"/features_v8/bySiteAut/{sample_vartype}_features.bed.gz"
#	params:
#		ncol_bed=35
#	output:
#		sample_w_headers=config["RAREDIR"]+"/features_v8/bySiteAutHeaders/{sample_vartype}_features_wheader.bed.gz"
#	shell:
#		"""
#		echo -en "chrom\tchromStart\tchromEnd" > {output}
#		#other_headers_num=$(({params.ncol_bed}+3))
#		for header_num in  `seq 4 {params.ncol_bed}`
#		do
#			echo -en "\theader$header_num" >> {output}
#		done
#		echo "" >> {output}
#		zcat {input} >> {ouput}
#		"""
#
#
